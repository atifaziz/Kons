<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
#region Copyright (c) 2013 Atif Aziz. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#endregion

namespace Kons
{
    using System;

    partial class ConsList
    {
<#
    foreach (var e in
        from i in Enumerable.Range(2, 8)
        select Enumerable.Range(1, i)
                         .Select(j => "item" + j.ToString(CultureInfo.InvariantCulture))
                         .ToArray()
        into items
        select new
        {
            Items  = items,
            Params = string.Join(", ", from item in items select "T " + item),
        })
    { #>
        public static ConsList<T> Cons<T>(<#= e.Params #>) =>
            Cons(<#= string.Join(", ", e.Items) #>, ConsList<T>.Empty);
        public static ConsList<T> Cons<T>(<#= e.Params #>, ConsList<T> list) =>
            list.<#= string.Join(".", from item in e.Items.Reverse() select "Prepend(" + item + ")") #>;

<#  } #>
    }

    partial class ConsList<T>
    {
<#
    var letters = "abcdefghijklmnopqrstuvwxyz".ToCharArray();
    const int cadrs = 16;
    var brackets = string.Join(null, Enumerable.Repeat(")", cadrs));
    for (var i = 2; i < cadrs; i++)
    { #>
        public TResult Cadr<TResult>(Func<<#= string.Join(", ", Enumerable.Repeat("T", i)) #>, ConsList<T>, TResult> selector)
            => Of(<#= i.ToString(CultureInfo.InvariantCulture) #>, null, $"List has too few items ({Count}) when at least {<#= i.ToString(CultureInfo.InvariantCulture) #>} are expected.")
                     .Cadr((a, ar)
                => <#= string.Join(@"
                => ", new string[0].Concat (letters.Skip(1).Zip(letters, (l, p) => p + "r.Cadr((" + l + ", " + l + "r)").Take(i - 1))) #> => selector(<#= string.Join(", ", letters.Take(i)) #>, <#= letters.Skip(i - 1).First() #>r)<#= brackets.Substring(0, i) #>;

<#  }#>
    }
}
